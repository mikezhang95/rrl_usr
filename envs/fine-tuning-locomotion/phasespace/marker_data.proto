syntax = "proto3";

// Must match the package of the protos generated by the mocap server.
package robotics.infrastructure.motion_capture.phasespace;

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

// A four-dimensional single precision vector.
message Vector4f {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

// A three-dimensional single precision vector.
message Vector3f {
  float x = 1;
  float y = 2;
  float z = 3;
}

message MarkerData {
  // The marker ID provided by the Phasespace SDK as set in the marker profile.
  int32 marker_id = 2;

  // x, y, z positions in mm
  Vector3f position_mm = 3;

  // Internal fields provided by the Phasespace SDK.
  // See https://drive.google.com/open?id=1_FYo8lRkwee8O1nWhRotDdVai0sTeLSv
  // for details
  uint32 internal_flags = 4;
  int64 internal_time = 5;
  float internalcond = 6;
}

message RigidData {
  // Still calling this marker_id for consistency
  int32 tracker_id = 2;

  // x, y, z positions in mm
  Vector3f position_mm = 3;

  // x, y, z, s quaternion
  Vector4f quat = 7;

  // Internal fields provided by the Phasespace SDK.
  // See https://drive.google.com/open?id=1_FYo8lRkwee8O1nWhRotDdVai0sTeLSv
  // for details
  uint32 internal_flags = 4;
  int64 internal_time = 5;
  float internalcond = 6;
}

message MarkersData {
  // This proto contains motion capture marker data and a timestamp.
  // There is one MarkerData OR RigidData object per marker that was detected
  // by the motion capture system during the current frame.
  // Iterate over the markers & rigid field and read the marker_id field to
  // check if a specific marker was detected.

  // The time at which this reading was received on the gLinux system
  // This is supposed to be within less than 1ms of the original acquisition
  // time on the Phasespace server.
  // The camera delay (delay between exposure and the server receiving the data)
  // is approx. 3ms (data provided by Phasespace).
  // Hence, the timestamp in this proto is approx. 3-4ms later than the
  // exposure. This delay has low jitter, but is tricky to measure.
  Timestamp timestamp = 1;

  repeated MarkerData markers = 2;

  repeated RigidData rigids = 4;

  // Internal fields provided by the Phasespace SDK.
  int64 internal_time = 3;
}

message MarkerTrackerParams {
  // Parameters for the MarkerTracker service.
  // Intentiionally left empty for now.
}

service MarkerTracker {
  // Streams MarkerData protobufs.
  rpc TrackMarkers(MarkerTrackerParams) returns (stream MarkersData) {}

  // Retrieves the latest singular instance of MarkerData.
  rpc GetLatestMarkerData(MarkerTrackerParams) returns (MarkersData) {}
}
